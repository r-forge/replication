# Chunk 59
sampleSizeZtest = function(delta, sd, sig.level = 0.05, power){
u <- qnorm(p = power)
v <- qnorm(p = 1 - sig.level/2)
n <- 2*(u + v)^2*sd^2/delta^2
return(n)
}
grid <- seq(0.09, 0.225, 0.001)
deltahat <- 0.15
se <- 0.025
ss <- sampleSizeZtest(delta = grid, sd = 0.4, sig.level = 0.01, power = 0.95)
ss1 <- sampleSizeZtest(delta = deltahat, sd = 0.4, sig.level = 0.01, power = 0.95)
set.seed(12345)
nsim <- 100000
deltahat2 <- rnorm(nsim, mean=deltahat, sd=se)
ss2 <- sampleSizeZtest(delta = deltahat2, sd = 0.4, sig.level = 0.01, power = 0.95)
library(gplots)
par(las=1)
plot(grid,
ss,
type="l",
xlab="Original effect estimate",
ylab="Replication sample size",
ylim=c(0, 800),
cex.lab = 1.5,
cex.axis = 1.2,
lwd = 2)
legend("topright",
"Power = 95%",
bty = "n",
cex = 1.75)
# Chunk 60
set.seed(12345)
nsim <- 100000
deltahat2 <- rnorm(nsim, mean=deltahat, sd=se)
ss2 <- sampleSizeZtest(delta = deltahat2, sd = 0.4, sig.level = 0.01, power = 0.95)
library(gplots)
par(las=1)
plot(grid,
ss,
type="l",
xlab="Original effect estimate",
ylab="Replication sample size",
ylim=c(0, 800),
cex.lab = 1.5,
cex.axis = 1.2,
lwd = 2)
lines(rep(deltahat, 2),
c(0, ss1),
lty=2,
lwd = 2)
points(deltahat,
ss1,
pch=19,
cex=1.2,
col=1)
points(deltahat,
0,
pch=19,
cex=1.2,
col=1)
lines(c(0, deltahat),
rep(ss1, 2),
lty = 2,
col = 1,
lwd = 2)
axis(2,
at=ss1,
label=round(ss1),
col=1,
col.axis=1,
cex.axis = 1.2)
legend("topright",
"Power = 95%",
bty = "n",
cex = 1.75)
# Chunk 61
set.seed(12345)
nsim <- 100000
deltahat2 <- rnorm(nsim, mean=deltahat, sd=se)
ss2 <- sampleSizeZtest(delta = deltahat2, sd = 0.4, sig.level = 0.01, power = 0.95)
library(gplots)
par(las=1)
plot(grid,
ss,
type="l",
xlab="Original effect estimate",
ylab="Replication sample size",
ylim=c(0, 800),
cex.lab = 1.5,
cex.axis = 1.2,
lwd = 2)
lines(rep(deltahat, 2),
c(0, ss1),
lty=2,
lwd = 2)
points(deltahat,
ss1,
pch=19,
cex=1.2,
col=1)
points(deltahat,
0,
pch=19,
cex=1.2,
col=2)
lines(c(0, deltahat),
rep(ss1, 2),
lty = 2,
col = 1,
lwd = 2)
axis(2,
at=ss1,
label=round(ss1),
col=1,
col.axis=1,
cex.axis = 1.2)
plotCI(x = deltahat,
y = 0,
li = quantile(deltahat2, 0.025),
ui = quantile(deltahat2, 0.975),
col=2, lwd=2, add=TRUE, err="x")
legend("topright",
"Power = 95%",
bty = "n",
cex = 1.75)
# Chunk 62
set.seed(12345)
nsim <- 100000
deltahat2 <- rnorm(nsim, mean=deltahat, sd=se)
ss2 <- sampleSizeZtest(delta = deltahat2, sd = 0.4, sig.level = 0.01, power = 0.95)
library(gplots)
par(las=1)
plot(grid,
ss,
type="l",
xlab="Original effect estimate",
ylab="Replication sample size",
ylim=c(0, 800),
cex.lab = 1.5,
cex.axis = 1.2,
lwd = 2)
lines(rep(deltahat, 2),
c(0, ss1),
lty=2,
lwd = 2)
points(deltahat,
ss1,
pch=19,
cex=1.2,
col=1)
points(deltahat,
0,
pch=19,
cex=1.2,
col=2)
points(min(grid),
mean(ss2),
pch=19,
cex=1.2,
col=2)
lines(c(0, deltahat),
rep(ss1, 2),
lty = 2,
col = 1,
lwd = 2)
axis(2,
at=ss1,
label=round(ss1),
col=1,
col.axis=1,
cex.axis = 1)
plotCI(x = deltahat, y=0, li=quantile(deltahat2, 0.025), ui = quantile(deltahat2, 0.975),
col=2, lwd=2, add=TRUE, err="x")
plotCI(x = min(grid), y=mean(ss2), li=quantile(ss2, 0.025), ui = quantile(ss2, 0.975),
col=2, lwd=2, add=TRUE, err="y")
lines(rep(quantile(deltahat2, 0.025), 2),
c(0, quantile(ss2, 0.975)),
lty=2, col=2,
lwd = 2)
lines(rep(quantile(deltahat2, 0.975), 2),
c(0, quantile(ss2, 0.025)),
lty=2, col=2,
lwd = 2)
lines(c(0, quantile(deltahat2, 0.975)),
rep(quantile(ss2, 0.025), 2),
lty=2,
col=2,
lwd = 2)
lines(c(0, quantile(deltahat2, 0.025)),
rep(quantile(ss2, 0.975), 2),
lty =2,
col=2,
lwd = 2)
axis(2,
at=mean(ss2),
label=round(mean(ss2)),
col = 2,
col.axis = 2,
cex.axis = 1.2)
legend("topright",
"Power = 95%",
bty = "n",
cex = 1.75)
study$c <- with(study, se_fisor^2/se_fisr^2)
study <- subset(SSRP,
study == "Pyc and Rawson (2010), Science")
study$c <- with(study, se_fisor^2/se_fisr^2)
study$c <- with(study, se_fiso^2/se_fisr^2)
study$c
par(las = 1)
pval.or <- c(0.0001, 0.001, 0.005, 0.01, 0.025)
pow.cond <- powerSignificance(zo = p2z(pval.or, alternative = "one.sided"),
c = 1, designPrior = "conditional")
pow.condRS <- powerReplicationSuccess(zo = p2z(pval.or, alternative = "one.sided"),
c = 1, designPrior = "conditional")
pow.condshrink <- powerSignificance(zo = p2z(pval.or, alternative = "one.sided"),
c = 1, designPrior = "conditional", shrinkage=0.25)
pow.pred <- powerSignificance(zo = p2z(pval.or, alternative = "one.sided"),
c = 1, designPrior = "predictive")
pow.predRS <- powerReplicationSuccess(zo = p2z(pval.or, alternative = "one.sided"),
c = 1, designPrior = "predictive")
ss.cond <- sampleSizeSignificance(zo = p2z(pval.or, alternative = "one.sided"),
power=0.8, designPrior = "conditional")
ss.condshrink <- sampleSizeSignificance(zo = p2z(pval.or, alternative = "one.sided"),
power=0.8, designPrior = "conditional", shrinkage=0.25)
ss.pred <- sampleSizeSignificance(zo = p2z(pval.or, alternative = "one.sided"),
power=0.8, designPrior = "predictive")
plot(pval.or, pow.cond*100, type = "p", col = "red", ylim = c(0,100),
xlab = "One-sided original p-value",
ylab = "Power (in %)", pch = 20, cex = 1.75,
cex.lab = 1.5,
cex.axis = 1.5)
points(pval.or, pow.pred*100, col = "blue", pch = 20, cex = 1.75)
legend("topright",
c("Conditional", "Predictive"),
col = c("red", "blue"),
pch = 20, bty = "n",
cex = 2.2)
par(las = 1)
po.plot <- seq(0.000001, 0.025, by = 0.0001)
pow.cond1 <- powerSignificance(zo = p2z(po.plot, alternative = "one.sided"),
c = 1, designPrior = "conditional")
pow.pred1 <- powerSignificance(zo = p2z(po.plot, alternative = "one.sided"),
c = 1, designPrior = "predictive")
plot(po.plot, pow.cond1*100, col = "red", ylim = c(0,100), type = "l",
xlab = "One-sided original p-value",
ylab = "Power (in %)", lwd = 1.8,
cex.lab = 1.5,
cex.axis = 1.5)
lines(po.plot, pow.pred1*100, col = "blue", lwd = 2)
points(pval.or, pow.cond*100, col = "red", pch = 20, cex = 1.75)
points(pval.or, pow.pred*100, col = "blue", pch = 20, cex = 1.75)
abline(h = 50, lty = 3)
axis(2, at = 50, label = "50", cex.axis = 1.5,
col = "gray40")
legend("topright",
c("Conditional", "Predictive"),
col = c("red", "blue"),
lty = 1, bty = "n",
cex = 2.2, lwd = 2)
par(las = 1)
ss.cond1 <- sampleSizeSignificance(zo = p2z(po.plot, alternative = "one.sided"),
power = 0.8, designPrior = "conditional")
ss.pred1 <- sampleSizeSignificance(zo = p2z(po.plot, alternative = "one.sided"),
power = 0.8, designPrior = "predictive" )
plot(po.plot, ss.cond1, type = "l", ylim = c(0, 4), col = "red",
xlab = "One-sided original p-value",
ylab = "Relative sample size",
lwd = 2,
cex.lab = 1.5,
cex.axis = 1.5)
lines(po.plot, ss.pred1, col = "blue", lwd = 2)
abline(h = c(1, 2, 3), col = "grey", lty = 2)
points(pval.or, ss.cond, col = "red", pch = 20, cex = 1.75)
points(pval.or, ss.pred, col = "blue", pch = 20, cex = 1.75)
legend("topleft",
c("Conditional", "Predictive"),
col = c("red", "blue"),
lty = 1, bty = "n",
cex = 2.2,
lwd = 2,
bg = "white")
par(las = 1)
pow.cond2 <- powerReplicationSuccess(zo = p2z(po.plot, alternative = "one.sided"),
c = 1, designPrior = "conditional",
alternative = "one.sided")
pow.pred2 <- powerReplicationSuccess(zo = p2z(po.plot, alternative = "one.sided"),
c = 1, designPrior = "predictive",
alternative = "one.sided")
plot(po.plot, pow.cond2*100, type = "l", col = "red", ylim = c(0,100),
lwd = 1.5,
xlab = "One-sided original p-value",
ylab = "Power (in %)",
cex.lab = 1.5,
cex.axis = 1.5,
lty = 1)
lines(po.plot, pow.cond1*100, col = "blue", lwd = 1.5, lty = 1)
abline(h = 50, lty = 3, lwd = 1.5)
# points(pval.or, pow.condRS*100, col = "red", pch = 20, cex = 1.75)
# points(pval.or, pow.predRS*100, col = "blue", pch = 20, cex = 1.75)
axis(2, at = 50, label = "50", cex.axis = 1.5,
col = "gray40")
legend("topright",
c("2TR", expression(paste("golden ", p[s)))]),
col = c("red", "blue"),
lty = 1.5, bty = "n",
cex = 2.2,
lwd = 1.5)
legend("topright",
c("2TR", expression(paste("golden ", p[s])))),
col = c("red", "blue"),
lty = 1.5, bty = "n",
cex = 2.2,
lwd = 1.5)
legend("topright",
c("2TR", expression(paste("golden ", p[S]))),
col = c("red", "blue"),
lty = 1.5, bty = "n",
cex = 2.2,
lwd = 1.5)
plot(po.plot, pow.cond2*100, type = "l", col = "red", ylim = c(0,100),
lwd = 2.1,
xlab = "One-sided original p-value",
ylab = "Power (in %)",
cex.lab = 1.5,
cex.axis = 1.5,
lty = 1)
lines(po.plot, pow.cond1*100, col = "blue", lwd = 2.1, lty = 1)
%% <<echo = F, fig.height = 7>>=
par(mfrow = c(1,1),
las = 1)
%hiha
\begin{frame}[fragile]{Solution: Exercise 3.2}
par(mfrow = c(1,1),
las = 1)
ss.cond2 <- sampleSizeReplicationSuccess(zo = p2z(po.plot, alternative = "one.sided"),
power = 0.8,
alternative = "one.sided",
type = "golden",
designPrior = "conditional",
level = 0.025)
ss.cond3 <- sampleSizeReplicationSuccess(zo = p2z(po.plot, alternative = "one.sided"),
power = 0.8,
alternative = "one.sided",
type = "controlled",
designPrior = "conditional",
level = 0.025)
plot(po.plot,
ss.cond2,
type = "l",
col = "red",
ylim = c(0, 10),
cex.lab = 1.5,
cex.axis = 1.5,
ylab = "Relative sample size",
xlab = "One-sided original p-value",
lwd = 2)
lines(po.plot,
ss.cond,
type = "l",
col = "blue",
lwd = 2)
lines(po.plot,
ss.cond1,
type = "l",
col = "blue",
lwd = 2)
plot(po.plot,
ss.pred2,
type = "l",
col = "red",
ylim = c(0, 10),
cex.lab = 1.5,
cex.axis = 1.5,
ylab = "Relative sample size",
xlab = "One-sided original p-value",
lwd = 2)
ss.pred2 <- sampleSizeReplicationSuccess(zo = p2z(po.plot, alternative = "one.sided"),
power = 0.8,
alternative = "one.sided",
designPrior = "predictive",
type = "golden",
level = 0.025)
plot(po.plot,
ss.pred2,
type = "l",
col = "red",
ylim = c(0, 10),
cex.lab = 1.5,
cex.axis = 1.5,
ylab = "Relative sample size",
xlab = "One-sided original p-value",
lwd = 2)
plot(po.plot,
ss.cond2,
type = "l",
col = "red",
ylim = c(0, 10),
cex.lab = 1.5,
cex.axis = 1.5,
ylab = "Relative sample size",
xlab = "One-sided original p-value",
lwd = 2)
plot(po.plot,
ss.cond2,
type = "l",
col = "red",
ylim = c(0, 12),
cex.lab = 1.5,
cex.axis = 1.5,
ylab = "Relative sample size",
xlab = "One-sided original p-value",
lwd = 2)
lines(po.plot,
ss.cond1,
type = "l",
col = "blue",
lwd = 2)
plot(po.plot,
ss.cond3,
type = "l",
col = "red",
ylim = c(0, 12),
cex.lab = 1.5,
cex.axis = 1.5,
ylab = "Relative sample size",
xlab = "One-sided original p-value",
lwd = 2)
lines(po.plot,
ss.cond1,
type = "l",
col = "blue",
lwd = 2)
plot(po.plot,
ss.cond3,
type = "l",
col = "red",
ylim = c(0, 4),
cex.lab = 1.5,
cex.axis = 1.5,
ylab = "Relative sample size",
xlab = "One-sided original p-value",
lwd = 2)
lines(po.plot,
ss.cond1,
type = "l",
col = "blue",
lwd = 2)
### golden plot
plot(NULL ,
xlim = myplim,
ylim = mydlim,
xlab = expression(paste("Original ", italic(p), "-value ", italic(p[o]))),
ylab = expression(paste("Relative effect size ", italic(d))),
log = "xy",
xaxt = "n",
xlim = c(0.001, 0.15))##, axes=FALSE)
col.seq
par(las = 1,
mar = c(5.1, 4.1, 4.1, 3.2))
alpha = 0.025
cval <- c(0.5, 1, 2, 5, 10)
aval <- levelSceptical(c = cval, alternative = "one.sided", level = alpha,
type = "controlled")
addon = 0.003
alphaU <- seq(alpha+.001, 0.145, 0.001)
mycol <- col.seq
alphaU <- c(alpha, alphaU)
c <- c(0, c)
c_plot <- seq(0.5, 20, by = 0.01)
alphaU_plot <- levelSceptical(level = alpha,
c = c_plot,
alternative = "one.sided",
type = "controlled")
c_sub2 <- c(0.5, 1, 2, 5, 10)
plot(c_plot + addon, alphaU_plot, type="l", lwd=1.5, xlab=bquote(paste("Relative sample size ", c)),
ylab = "upper bound", axes=FALSE,
log = "xy", cex.lab = 0.8, ylim = c(0.05, 0.15), xlim = c(0.4, 10))
axis(2, at = aval, labels =formatPval(aval), cex.axis = 0.6,
mgp = c(1, 0.9, 0))
myalphaU <- numeric()
for(i in 1:length(c_sub2)){
axis(1, at = c_sub2[i] + addon, labels = c_sub2[i], cex.axis = 0.65,
col.ticks = mycol[i], col.axis = mycol[i])
myalphaU[i] <- levelSceptical(c = c_sub2[i], level = alpha, type = "controlled")
points(c_sub2[i] + addon, myalphaU[i], pch=19, col = mycol[i], cex = 0.75)
lines( c(10e-10, c_sub2[i] + addon), rep(myalphaU[i],2), lty=2, col = mycol[i],
lwd = 1.5)
lines(rep(c_sub2[i] + addon,2), c(10e-10, myalphaU[i]), lty=2, col = mycol[i], lwd = 1.5)
}
source("~/.active-rstudio-document", echo=TRUE)
# Figure 5 - preparation
par(las = 1, mfrow = c(1, 2))
zalpha = p2z(alpha, alternative = "one.sided")
eps <-  10e-4
myplim <- c(eps, 0.15)
mydlim <- c(0.15, 15)
pos <-  seq(10e-200, 0.12, length.out = 1000)
zos <- p2z(pos, alternative = "one.sided")
c.seq <-  c(0.5, 1, 2, 5, 10)
col.seq <- c(5, 4, 3 , 2, 1)
resultsCont <- results2TR <- resultsGold <-  matrix(NA, nrow = length(zos), ncol = length(c.seq))
for(i in 1:length(c.seq)){
resultsCont[, i] <- effectSizeReplicationSuccess(zo = zos, c = c.seq[i], level = alpha,
alternative = "one.sided",
type = "controlled")
results2TR[, i] <- ifelse(zos > zalpha,  effectSizeSignificance(zo = zos, c = c.seq[i], level = alpha,
alternative = "one.sided"), NA)
resultsGold[, i]  <- effectSizeReplicationSuccess(zo = zos, c = c.seq[i], level = alpha,
type = "golden", alternative = "one.sided")
}
