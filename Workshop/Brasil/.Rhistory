pch = 20, pt.cex = 2, cex = 1.4,
col = c("#8B0000B3", "#00008AB3"), bty = "n")
abline(h = 0, lty = 2)
abline(a = 0, b = 1, col = "grey")
}
# Chunk 42
RProjects$study2 <- RProjects$study
RProjects$study2[RProjects$study == "K Oberauer"] <- "Oberauer (2008)"
RProjects$study2[RProjects$study == "JR Schmidt, D Besner"] <-
"Schmidt and Besner (2008)"
RProjects$study2[RProjects$study == "BK Payne, MA Burkley, MB Stokes"] <-
"Payne, Burkley, and Stokes (2008)"
RProjects$study2[RProjects$study == "Balafoutas and Sutter (2012), Science"] <-
"Balafoutas and Sutter (2012)"
RProjects$study2[RProjects$study == "Pyc and Rawson (2010), Science"] <-
"Pyc and Rawson (2010)"
RProjects$study2[RProjects$study == "Nichols (2006)"] <-
"Nichols (2006)"
## discrepant studies
discrepantDF <- subset(RProjects, pSsuccessC != TTR)[, c("study", "c", "ro",
"rr", "po1", "pr1",
"psC", "zo", "se_fiso", "se_fisr", "fiso", "fisr")]
discrepantDF$c <- as.character(round(discrepantDF$c, 1))
discrepantDF$ro <- as.character(round(discrepantDF$ro, 2))
discrepantDF$rr <- as.character(round(discrepantDF$rr, 2))
discrepantDF$po1 <- phighlighfun(discrepantDF$po1)
discrepantDF$pr1 <- phighlighfun(discrepantDF$pr1)
discrepantDF$ps <- phighlighfun(discrepantDF$ps)
discTab <- xtable(discrepantDF[, 1:(ncol(discrepantDF)-5)])
colnames(discTab) <- c("Study", "$n_r / n_o$", "$r_o$", "$r_r$", "$p_o$",
"$p_r$", "$p_s$ (controlled)")
print(discTab, include.rownames = FALSE, booktabs = TRUE,
sanitize.text.function = function(x) {x}, size = "small",
floating = FALSE)
# Chunk 43
phighlighfun2 <- function(dmin, d) {
ifelse(dmin > d,
paste0("\\textcolor{red}{", round(dmin, 2), "}"),
paste0("\\textcolor{black}{",  round(dmin, 2), "}"))
}
discrepantDF$d <- discrepantDF$fisr/discrepantDF$fiso
discrepantDF$dminSign <- effectSizeSignificance(zo = discrepantDF$zo,
c = discrepantDF$se_fiso^2/discrepantDF$se_fisr^2, level = 0.025)
discrepantDF$dminRS <- effectSizeReplicationSuccess(zo = discrepantDF$zo,
c = discrepantDF$se_fiso^2/discrepantDF$se_fisr^2, level = 0.025,
type = "golden")
discrepantDF$dminSign <- phighlighfun2(dmin = discrepantDF$dminSign, d = discrepantDF$d)
discrepantDF$dminRS <- phighlighfun2(dmin = discrepantDF$dminRS, d = discrepantDF$d)
discrepantDF$d <- paste0("\\textcolor{blue}{", round(discrepantDF$d, 2) , "}")
discTab2 <- xtable(discrepantDF[, -c(3:4, 6:12)])
colnames(discTab2) <- c("Study", "$n_r / n_o$", "$p_o$",
"$d$", "$d_{min} (2TR)$", "$d_{min} (p_S)$")
print(discTab2, include.rownames = FALSE, booktabs = TRUE,
sanitize.text.function = function(x) {x}, size = "small",
floating = FALSE)
# Chunk 44
RProjects$po1 <- z2p(RProjects$fiso/RProjects$se_fiso, "one.sided")
RProjects_sign <- which(RProjects$po1 < 0.025)
dmin_sign <- effectSizeSignificance(zo = RProjects$zo[RProjects_sign],
c = RProjects$c[RProjects_sign],
level = 0.025)
dmin_rs <- effectSizeReplicationSuccess(zo = RProjects$zo[RProjects_sign],
c = RProjects$c[RProjects_sign],
level = 0.025,
type = "golden",
alternative = "one.sided")
dmin_DF <- as.data.frame(cbind(dmin_sign, dmin_rs,
RProjects$c[RProjects_sign]))
colnames(dmin_DF) <-  c("dmin_sign", "dmin_rs", "c")
ggplot(data= dmin_DF, aes(x = dmin_sign, y = dmin_rs)) +
geom_point(aes(size  = c, col = c)) +
xlim(0, 2) +
ylim(0, 2) +
geom_abline(intercept = 0, slope = 1, color = "grey") +
xlab(expression(paste(d[min], " (two-trials rule)"))) +
ylab(expression(paste(d[min], " (sceptical p-value)"))) +
theme_bw()  +
theme(axis.text = element_text(size = 20),
axis.title = element_text(size = 25),
panel.background = element_blank()) +
scale_size(breaks = c(10, 5, 1, 0.2)) +
scale_colour_gradientn(colours = (c("orange", "red", "darkred", "black")))
# Chunk 45
study_plot
ssv <- function(zo, so, a) {
tau2 <- so^2/(zo^2/qnorm(p = a/2, lower.tail = FALSE)^2 - 1)
return(tau2)
}
S <- function(U, L) (U - L)^2/(4*sqrt(U*L))
ps_uncalibrated <- pSceptical(zo = study$fiso/study$se_fiso,
zr = study$fisr/study$se_fisr,
c = study$se_fiso^2/study$se_fisr^2,
alternative = "one.sided",
type = "nominal")
ps <- pSceptical(zo = study$fiso/study$se_fiso,
zr = study$fisr/study$se_fisr,
c = study$se_fiso^2/study$se_fisr^2,
alternative = "one.sided",
type = "golden")
s <- S(U = study$fiso + qnorm(0.975)*study$se_fiso,
L = study$fiso - qnorm(0.975)*study$se_fiso)
tau2 <- ssv(zo = study$fiso/study$se_fiso,
so = study$se_fiso, a = ps_uncalibrated*2)
sprior_df <- data.frame(x = 1.5, mu = 0,
upper = qnorm(p = 0.975)*sqrt(tau2),
lower = qnorm(p = 0.025)*sqrt(tau2))
scept_plot <- ggplot(data = plot_df, aes(x = Study, y = z)) +
geom_hline(yintercept = 0, lty = 2) +
geom_pointrange(aes(ymin = z - qnorm(0.975)*se,
ymax = z + qnorm(0.975)*se),
size = 1.5) +
# geom_pointrange(data = sprior_df,
#                 aes(x = 1.5, y = 0,
#                     ymin = lower, ymax = upper),
#                 color = "purple3", size = 1.5) +
# geom_text(data = sprior_df,
#           aes(x = 1.5, y = upper,
#               label = "sceptical prior"),
#           nudge_y = 0.15, nudge_x = 0,
#           color = "purple3", size = 9) +
geom_text(data = data.frame(x = 1.5, y = 0.9,
ps = formatPval(ps)),
aes(x = x, y = y,
label = paste("italic(p)[S] ==~", ps, sep = "")),
parse = TRUE, size = 10, color = "purple3") +
geom_text(aes(label = paste("italic(p)[o] ==~",
p[1], sep = "")), parse = TRUE,
x = 1, y = 0.8, size = 8) +
geom_text(aes(label = paste("italic(p)[r] ==~",
p[2], sep = "")), parse = TRUE,
x = 2, y = 0.8, size = 8) +
geom_text(aes(label = paste("hat(theta)[o] ==~",
round(z[1], 2),
sep = "")), parse = TRUE,
x = 0.7, y = 0.38, size = 8) +
geom_text(aes(label = paste("hat(theta)[o] ==~",
round(z[2], 2),
sep = "")), parse = TRUE,
x = 2.3,y = 0.25, size = 8) +
geom_text(aes(label = paste("italic(n)[o] ==~", n[1], sep = "")),
parse = TRUE,
x = 0.7, y = 0.25, size = 8) +
geom_text(aes(label = paste("italic(n)[r] ==~", n[2], sep = "")),
parse = TRUE,
x = 2.3, y = 0.1, size = 8) +
labs(x = " ", y = "Effect Size") +
ylim(-0.35, 1) +
theme_bw() +
theme(axis.text = element_text(size = 25),
axis.title = element_text(size = 30))
scept_plot
psC <- pSceptical(zo = study$fiso/study$se_fiso,
zr = study$fisr/study$se_fisr,
c = study$se_fiso^2/study$se_fisr^2,
alternative = "one.sided",
type = "controlled")
psC
ps <- pSceptical(zo = study$fiso/study$se_fiso,
zr = study$fisr/study$se_fisr,
c = study$se_fiso^2/study$se_fisr^2,
alternative = "one.sided",
type = "golden")
ps
psC
scept_plot <- ggplot(data = plot_df, aes(x = Study, y = z)) +
geom_hline(yintercept = 0, lty = 2) +
geom_pointrange(aes(ymin = z - qnorm(0.975)*se,
ymax = z + qnorm(0.975)*se),
size = 1.5) +
# geom_pointrange(data = sprior_df,
#                 aes(x = 1.5, y = 0,
#                     ymin = lower, ymax = upper),
#                 color = "purple3", size = 1.5) +
# geom_text(data = sprior_df,
#           aes(x = 1.5, y = upper,
#               label = "sceptical prior"),
#           nudge_y = 0.15, nudge_x = 0,
#           color = "purple3", size = 9) +
geom_text(data = data.frame(x = 1.5, y = 0.9,
ps = formatPval(ps)),
aes(x = x, y = y,
label = paste("italic(p)[S] ==~", ps, sep = "")),
parse = TRUE, size = 10, color = "orange") +
geom_text(data = data.frame(x = 1.5, y = 0.4,
ps = formatPval(psC)),
aes(x = x, y = y,
label = paste("italic(p)[S] ==~", psC, sep = "")),
parse = TRUE, size = 10, color = "blue") +
geom_text(aes(label = paste("italic(p)[o] ==~",
p[1], sep = "")), parse = TRUE,
x = 1, y = 0.8, size = 8) +
geom_text(aes(label = paste("italic(p)[r] ==~",
p[2], sep = "")), parse = TRUE,
x = 2, y = 0.8, size = 8) +
geom_text(aes(label = paste("hat(theta)[o] ==~",
round(z[1], 2),
sep = "")), parse = TRUE,
x = 0.7, y = 0.38, size = 8) +
geom_text(aes(label = paste("hat(theta)[o] ==~",
round(z[2], 2),
sep = "")), parse = TRUE,
x = 2.3,y = 0.25, size = 8) +
geom_text(aes(label = paste("italic(n)[o] ==~", n[1], sep = "")),
parse = TRUE,
x = 0.7, y = 0.25, size = 8) +
geom_text(aes(label = paste("italic(n)[r] ==~", n[2], sep = "")),
parse = TRUE,
x = 2.3, y = 0.1, size = 8) +
labs(x = " ", y = "Effect Size") +
ylim(-0.35, 1) +
theme_bw() +
theme(axis.text = element_text(size = 25),
axis.title = element_text(size = 30))
scept_plot
scept_plot <- ggplot(data = plot_df, aes(x = Study, y = z)) +
geom_hline(yintercept = 0, lty = 2) +
geom_pointrange(aes(ymin = z - qnorm(0.975)*se,
ymax = z + qnorm(0.975)*se),
size = 1.5) +
# geom_pointrange(data = sprior_df,
#                 aes(x = 1.5, y = 0,
#                     ymin = lower, ymax = upper),
#                 color = "purple3", size = 1.5) +
# geom_text(data = sprior_df,
#           aes(x = 1.5, y = upper,
#               label = "sceptical prior"),
#           nudge_y = 0.15, nudge_x = 0,
#           color = "purple3", size = 9) +
geom_text(data = data.frame(x = 1.5, y = 0.9,
ps = formatPval(ps)),
aes(x = x, y = y,
label = paste("italic(p)[S] ==~", ps, sep = "")),
parse = TRUE, size = 10, color = "orange") +
geom_text(data = data.frame(x = 1.5, y = 0.4,
ps = formatPval(psC)),
aes(x = x, y = y,
label = paste("italic(p)[S] ==~", formatPval(psC), sep = "")),
parse = TRUE, size = 10, color = "blue") +
geom_text(aes(label = paste("italic(p)[o] ==~",
p[1], sep = "")), parse = TRUE,
x = 1, y = 0.8, size = 8) +
geom_text(aes(label = paste("italic(p)[r] ==~",
p[2], sep = "")), parse = TRUE,
x = 2, y = 0.8, size = 8) +
geom_text(aes(label = paste("hat(theta)[o] ==~",
round(z[1], 2),
sep = "")), parse = TRUE,
x = 0.7, y = 0.38, size = 8) +
geom_text(aes(label = paste("hat(theta)[o] ==~",
round(z[2], 2),
sep = "")), parse = TRUE,
x = 2.3,y = 0.25, size = 8) +
geom_text(aes(label = paste("italic(n)[o] ==~", n[1], sep = "")),
parse = TRUE,
x = 0.7, y = 0.25, size = 8) +
geom_text(aes(label = paste("italic(n)[r] ==~", n[2], sep = "")),
parse = TRUE,
x = 2.3, y = 0.1, size = 8) +
labs(x = " ", y = "Effect Size") +
ylim(-0.35, 1) +
theme_bw() +
theme(axis.text = element_text(size = 25),
axis.title = element_text(size = 30))
scept_plot
install.packages("devtools")
install.packages("devtools")
install.packages("meta")
devtools::install_github(repo = "SamCH93/ReplicationSuccess",
ref = "T1Econtrol")
install.packages("meta")
vignette("ReplicationSuccess")
library(ReplicationSuccess)
vignette("ReplicationSuccess")
?RProjects
with(RProjects, mean(fisr/fiso))
with(RProjects, fisr/fiso)
with(RProjects, fisr > fiso)
with(RProjects, mean(fisr > fiso))
with(RProjects,
plot(fiso~fisr))
with(RProjects,
plot(fisr~fiso, type = "p"))
with(RProjects,
plot(fisr~fiso, pch = 19))
with(RProjects,
plot(fisr~fiso, pch = 19),
col = alpha("black", 0.7))
with(RProjects,
plot(fisr~fiso, pch = 19),
col = alpha("black", 0.5))
with(RProjects,
plot(fisr~fiso, pch = 19),
col = alpha("black", 0.5),
xlim = c(-0.5, 2).
ylim = c(-0.5, 2))
with(RProjects,
plot(fisr~fiso, pch = 19),
col = alpha("black", 0.5),
xlim = c(-0.5, 2),
ylim = c(-0.5, 2))
with(RProjects,
plot(fisr~fiso, pch = 19),
col = alpha("black", 0.3),
xlim = c(-0.5, 2),
ylim = c(-0.5, 2))
alpha("black", 0.3)
with(RProjects,
plot(fisr~fiso, pch = 19),
col = alpha("black", 0.1),
xlim = c(-0.5, 2),
ylim = c(-0.5, 2))
alpha("black", 0.1)
gg_zAll <- ggplot(data = RProjects, aes(x = fiso, y = fisr)) +
geom_hline(yintercept = 0, lty = 2) +
geom_abline(intercept = 0, slope = 1, col = "grey") +
geom_point(alpha = 0.7, size = 7, shape = 21,
fill = "midnightblue") +
labs(x = expression(paste("Original effect estimate ", hat(theta)[o])),
y = expression(paste("Replication effect estimate ", hat(theta)[r]))) +
lims(x = c(-0.5, 2), y = c(-0.5, 2)) +
coord_fixed() +
theme_bw() +
theme(axis.text = element_text(size = 25),
axis.title = element_text(size = 30)); gg_zAll
with(RProjects, metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr)))
with(RProjects, metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr),
studlab = study))
?metagen
for(i in 1:nrow(RProjects)){
with(i, metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr),
studlab = study))
}
for(i in 1:nrow(RProjects)){
with(RProjects[i, ], metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr),
studlab = study))
}
with(RProjects[i, ], metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr)))
for(i in 1:nrow(RProjects)){
with(RProjects[i, ], metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr)))
}
i = 1
with(RProjects[i, ], metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr)))
a <- with(RProjects[i, ], metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr)))
a$TE
a$pval
a$pval.fixed
a$pval.random
pval_meta[length(pval_meta) + 1] <- with(RProjects[i, ], metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr))$pval.random)
for(i in 1:nrow(RProjects)){
pval_meta[length(pval_meta) + 1] <- with(RProjects[i, ], metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr))$pval.random)
}
pval_meta <- c()
for(i in 1:nrow(RProjects)){
pval_meta[length(pval_meta) + 1] <- with(RProjects[i, ], metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr))$pval.random)
}
pval_meta
sum(pval_meta < 0.05)
?metagen
?meta
?metagen
library(metafor)
list("package:metafor")
ls("package:metafor")
pval_meta <- c()
for(i in 1:nrow(RProjects)){
pval_meta[length(pval_meta) + 1] <- with(RProjects[i, ], metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr))$pval.random)
}
sum(pval_meta < 0.05)
ma_estimate/sqrt(var_ma_estimate
abs(ma_estimate/sqrt(var_ma_estimate)
abs(ma_estimate/sqrt(var_ma_estimate)
(ma_estimate/sqrt(var_ma_estimate))
)
ma_estimate/sqrt(var_ma_estimate)
z2p(3.2, "one.sided")
z2p(3.2, "two.sided")
pval_meta
}
pval_meta <- c()
for(i in 1:nrow(RProjects)){
pval_meta[length(pval_meta) + 1] <- with(RProject[i, ],
metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr)))
}
pval_meta <- c()
for(i in 1:nrow(RProjects)){
pval_meta[length(pval_meta) + 1] <- with(RProjects[i, ],
metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr)))
}
pval_meta <- c()
for(i in 1:nrow(RProjects)){
pval_meta[length(pval_meta) + 1] <- with(RProjects[i, ],
metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr))$pval.random)
}
Rprojects$pMeta <- pval_meta
RProjects$pMeta <- pval_meta
RProjects$pMsuccess <- RProjects$pMeta < 0.055
pval_meta <- c()
for(i in 1:nrow(RProjects)){
pval_meta[length(pval_meta) + 1] <- with(RProjects[i, ],
metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr))$pval.random)
}
RProjects$pMeta <- pval_meta
RProjects$pMsuccess <- RProjects$pMeta < 0.05
par(mfrow = c(2, 2), las = 1, mai = rep(0.68, 4))
for (p in unique(RProjects$project)) {
data_project <- subset(RProjects, project == p)
success <- data_project$pMeta < 0.025
col_success <- ifelse(success == FALSE, "#333333B3", "#8B0000B3")
title <- paste0(p, ": ", round(mean(success)*100, 0), "% (",
sum(success), "/",  length(success), ")")
plot(rr ~ ro, data = data_project, ylim = c(-0.5, 1), cex = 2.5,
xlim = c(-0.5, 1), main = title, xlab = expression(italic(r)[o]),
ylab = expression(italic(r)[r]), col = col_success, pch = 20,
cex.main = 1.8, cex.axis = 1.5, cex.lab = 1.5)
legend("topleft", c(expression(italic(p)[s] < 0.025),
expression(italic(p)[s] >= 0.025)),
pch = 20, pt.cex = 2, cex = 1.4,
col = c("#8B0000B3", "#333333B3"), bty = "n")
abline(h = 0, lty = 2)
abline(a = 0, b = 1, col = "grey")
}
for (p in unique(RProjects$project)) {
data_project <- subset(RProjects, project == p)
success <- data_project$pMeta < 0.025
col_success <- ifelse(success == FALSE, "#333333B3", "#8B0000B3")
title <- paste0(p, ": ", round(mean(success)*100, 0), "% (",
sum(success), "/",  length(success), ")")
plot(rr ~ ro, data = data_project, ylim = c(-0.5, 1), cex = 2.5,
xlim = c(-0.5, 1), main = title, xlab = expression(italic(r)[o]),
ylab = expression(italic(r)[r]), col = col_success, pch = 20,
cex.main = 1.8, cex.axis = 1.5, cex.lab = 1.5)
legend("topleft", c(expression(italic(p)[M] < 0.05),
expression(italic(p)[M] >= 0.05)),
pch = 20, pt.cex = 2, cex = 1.4,
col = c("#8B0000B3", "#333333B3"), bty = "n")
abline(h = 0, lty = 2)
abline(a = 0, b = 1, col = "grey")
}
## compute for each project
MetaList <- lapply(X = unique(RProjects$project), FUN = function(p) {
data_project <- subset(RProjects, project == p)
data.frame(project = p, meta = mean(data_project$pMsuccess)*100, type = "meta-analysis",
metaFormat = paste0(round(mean(data_project$pMsuccess)*100, 0),
"\\% (", sum(data_project$pMsuccess), "/",
length(data_project$pMsuccess), ")"))
})
MetaList
MetaDF <- do.call("rbind", metaList)
MetaDF <- do.call("rbind", MetaList)
allMetaDF <- data.frame(project = "all", incomp = mean(RProjects$pMsuccess)*100,
type = "Q-test",
incompFormat = paste0(round(mean(RProjects$pMsuccess)*100, 0),
"\\% (", sum(RProjects$pMsuccess),
"/", length(RProjects$pMsuccess), ")"))
## compute for each project
MetaList <- lapply(X = unique(RProjects$project), FUN = function(p) {
data_project <- subset(RProjects, project == p)
data.frame(project = p, meta = mean(data_project$pMsuccess)*100, type = "meta-analysis",
metaFormat = paste0(round(mean(data_project$pMsuccess)*100, 0),
"\\% (", sum(data_project$pMsuccess), "/",
length(data_project$pMsuccess), ")"))
})
MetaDF <- do.call("rbind", MetaList)
## table
dfTableMeta <- rbind(MetaDF, allMetaDF)[,c(1, 4)]
MetaDF
allMetaDF <- data.frame(project = "all", meta = mean(RProjects$pMsuccess)*100,
type = "Q-test",
metaFormat = paste0(round(mean(RProjects$pMsuccess)*100, 0),
"\\% (", sum(RProjects$pMsuccess),
"/", length(RProjects$pMsuccess), ")"))
## compute for each project
MetaList <- lapply(X = unique(RProjects$project), FUN = function(p) {
data_project <- subset(RProjects, project == p)
data.frame(project = p, meta = mean(data_project$pMsuccess)*100, type = "meta-analysis",
metaFormat = paste0(round(mean(data_project$pMsuccess)*100, 0),
"\\% (", sum(data_project$pMsuccess), "/",
length(data_project$pMsuccess), ")"))
})
MetaDF <- do.call("rbind", MetaList)
## table
dfTableMeta <- rbind(MetaDF, allMetaDF)[,c(1, 4)]
Table2 <- xtable(dfTable2, digits = 1)
colnames(Table2) <- c("Project",
"$p_M < 0.05$")
print(Table2, include.rownames = FALSE, booktabs = TRUE,
add.to.row = list(pos = list(4), command = "\\midrule \n"),
sanitize.text.function = function(x) {x}, floating = FALSE)
RProjects$pMeta == RProjects$Qincompatible
RProjects$pMsuccess == RProjects$Qincompatible
RProjects$pMsuccess
RProjects$Qincompatible
sum(RProjects$pMsuccess == RProjects$Qincompatible)
PRojects
PProjects
RProjects
