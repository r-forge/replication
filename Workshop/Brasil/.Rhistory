#      ylab = "")
# arrows(PI$lower, studynr, PI$upper, studynr, length = 0.02,
#        angle = 90, code = 3, col = color)
# abline(v = 0, lty = 3)
title <- paste0(p, ": ", round(PropIncomp*100, 0), '% incompatible')
plot(rr ~ ro, data = data_project, ylim = c(-0.5, 1), cex = 2.5,
xlim = c(-0.5, 1), main = title, xlab = expression(italic(r)[o]),
ylab = expression(italic(r)[r]), col = color, pch = 20,
cex.main = 1.7, cex.axis = 1.5, cex.lab = 1.5)
legend("topleft",
c(expression(italic(p)[Q] < 0.05), expression(italic(p)[Q] >= 0.05)),
pch = 20, pt.cex = 2, cex = 1.4,
col = c("#8B0000B3", "#333333B3"), bty = "n")
abline(h = 0, lty = 2)
abline(a = 0, b = 1, col = "grey")
}
# Chunk 47
## computing one.sided sceptical p-value for replication projects
RProjects$ps <- with(RProjects, pSceptical(zo = zo, zr = zr, c = c,
alternative = "one.sided",
type = "golden"))
## compute for all projects
RProjects$pSsuccess <- RProjects$ps < 0.025
allpsDF <- data.frame(project = "all", success = mean(RProjects$pSsuccess)*100,
type = "psceptical",
successFormat = paste0(round(mean(RProjects$pSsuccess)*100, 0),
"\\% (", sum(RProjects$pSsuccess),
"/", length(RProjects$pSsuccess), ")"))
## compute for each project
psList <- lapply(X = unique(RProjects$project), FUN = function(p) {
data_project <- subset(RProjects, project == p)
data.frame(project = p, success = mean(data_project$pSsuccess)*100,
type = "psceptical",
successFormat = paste0(round(mean(data_project$pSsuccess)*100, 0),
"\\% (", sum(data_project$pSsuccess), "/",
length(data_project$pSsuccess), ")"))
})
psDF <- do.call("rbind", psList)
## table
dfTable3 <- rbind(psDF, allpsDF)[,c(1, 4)]
Table3 <- xtable(dfTable3, digits = 1)
colnames(Table3) <- c("Project", "sceptical $p$-value $< 0.025$")
print(Table3, include.rownames = FALSE, booktabs = TRUE,
add.to.row = list(pos = list(4), command = "\\midrule \n"),
sanitize.text.function = function(x) {x})
# Chunk 48
par(mfrow = c(2, 2), las = 1, mai = rep(0.68, 4))
for (p in unique(RProjects$project)) {
data_project <- subset(RProjects, project == p)
success <- data_project$ps < 0.025
col_success <- ifelse(success == FALSE, "#333333B3", "#8B0000B3")
title <- paste0(p, ": ", round(mean(success)*100, 0), "% (",
sum(success), "/",  length(success), ")")
plot(rr ~ ro, data = data_project, ylim = c(-0.5, 1), cex = 2.5,
xlim = c(-0.5, 1), main = title, xlab = expression(italic(r)[o]),
ylab = expression(italic(r)[r]), col = col_success, pch = 20,
cex.main = 1.8, cex.axis = 1.5, cex.lab = 1.5)
legend("topleft", c(expression(italic(p)[s] < 0.025),
expression(italic(p)[s] >= 0.025)),
pch = 20, pt.cex = 2, cex = 1.4,
col = c("#8B0000B3", "#333333B3"), bty = "n")
abline(h = 0, lty = 2)
abline(a = 0, b = 1, col = "grey")
}
# Chunk 49
par(mfrow = c(2, 2), las = 1, mai = rep(0.68, 4))
for (p in unique(RProjects$project)) {
data_project <- subset(RProjects, project == p)
discrep <- data_project$pSsuccess != data_project$TTR
col_discord <- ifelse(discrep == TRUE,
ifelse(data_project$pSsuccess == TRUE,
"#8B0000B3", "#00008AB3"), "#B2B2B299")
plot(rr ~ ro, data = data_project, ylim = c(-0.5, 1), cex = 2.5,
xlim = c(-0.5, 1), main = p, xlab = expression(italic(r)[o]),
ylab = expression(italic(r)[r]), col = col_discord, pch = 20,
cex.main = 1.8, cex.axis = 1.5, cex.lab = 1.5)
legend("topleft", legend = c(expression(paste(italic(p)[s], " only")),
"two-trials rule only"),
title = "success",
pch = 20, pt.cex = 2, cex = 1.4,
col = c("#8B0000B3", "#00008AB3"), bty = "n")
abline(h = 0, lty = 2)
abline(a = 0, b = 1, col = "grey")
}
# Chunk 50
phighlighfun <- function(p) {
ifelse(p > 0.025,
paste0("\\textcolor{red}{", biostatUZH::formatPval(p), "}"),
paste0("\\textcolor{black}{",  biostatUZH::formatPval(p), "}"))
}
RProjects$study2 <- RProjects$study
RProjects$study2[RProjects$study == "K Oberauer"] <- "Oberauer (2008)"
RProjects$study2[RProjects$study == "JR Schmidt, D Besner"] <-
"Schmidt and Besner (2008)"
RProjects$study2[RProjects$study == "BK Payne, MA Burkley, MB Stokes"] <-
"Payne, Burkley, and Stokes (2008)"
RProjects$study2[RProjects$study == "Balafoutas and Sutter (2012), Science"] <-
"Balafoutas and Sutter (2012)"
RProjects$study2[RProjects$study == "Pyc and Rawson (2010), Science"] <-
"Pyc and Rawson (2010)"
RProjects$study2[RProjects$study == "Nichols (2006)"] <-
"Nichols (2006)"
## discrepant studies
discrepantDF <- subset(RProjects, pSsuccess != TTR)[, c("study2", "c", "ro",
"rr", "po1", "pr1", "ps", "zo", "se_fiso", "se_fisr", "fiso", "fisr")]
discrepantDF$c <- as.character(round(discrepantDF$c, 1))
discrepantDF$ro <- as.character(round(discrepantDF$ro, 2))
discrepantDF$rr <- as.character(round(discrepantDF$rr, 2))
discrepantDF$po1 <- phighlighfun(discrepantDF$po1)
discrepantDF$pr1 <- phighlighfun(discrepantDF$pr1)
discrepantDF$ps <- phighlighfun(discrepantDF$ps)
discTab <- xtable(discrepantDF[, 1:(ncol(discrepantDF)-5)])
colnames(discTab) <- c("Study", "$n_r / n_o$", "$r_o$", "$r_r$", "$p_o$",
"$p_r$", "$p_s$")
print(discTab, include.rownames = FALSE, booktabs = TRUE,
sanitize.text.function = function(x) {x}, size = "small",
floating = FALSE)
# Chunk 51
phighlighfun2 <- function(dmin, d) {
ifelse(dmin > d,
paste0("\\textcolor{red}{", round(dmin, 2), "}"),
paste0("\\textcolor{black}{",  round(dmin, 2), "}"))
}
discrepantDF$d <- discrepantDF$fisr/discrepantDF$fiso
discrepantDF$dminSign <- effectSizeSignificance(zo = discrepantDF$zo,
c = discrepantDF$se_fiso^2/discrepantDF$se_fisr^2, level = 0.025)
discrepantDF$dminRS <- effectSizeReplicationSuccess(zo = discrepantDF$zo,
c = discrepantDF$se_fiso^2/discrepantDF$se_fisr^2, level = 0.025,
type = "golden")
discrepantDF$dminSign <- phighlighfun2(dmin = discrepantDF$dminSign, d = discrepantDF$d)
discrepantDF$dminRS <- phighlighfun2(dmin = discrepantDF$dminRS, d = discrepantDF$d)
discrepantDF$d <- paste0("\\textcolor{blue}{", round(discrepantDF$d, 2) , "}")
discTab2 <- xtable(discrepantDF[, -c(3:4, 6:12)])
colnames(discTab2) <- c("Study", "$n_r / n_o$", "$p_o$",
"$d$", "$d_{min} (2TR)$", "$d_{min} (p_S)$")
print(discTab2, include.rownames = FALSE, booktabs = TRUE,
sanitize.text.function = function(x) {x}, size = "small",
floating = FALSE)
# Chunk 52
RProjects$po1 <- z2p(RProjects$fiso/RProjects$se_fiso, "one.sided")
RProjects_sign <- which(RProjects$po1 < 0.025)
dmin_sign <- effectSizeSignificance(zo = RProjects$zo[RProjects_sign],
c = RProjects$c[RProjects_sign],
level = 0.025)
dmin_rs <- effectSizeReplicationSuccess(zo = RProjects$zo[RProjects_sign],
c = RProjects$c[RProjects_sign],
level = 0.025,
type = "golden",
alternative = "one.sided")
dmin_DF <- as.data.frame(cbind(dmin_sign, dmin_rs,
RProjects$c[RProjects_sign]))
colnames(dmin_DF) <-  c("dmin_sign", "dmin_rs", "c")
ggplot(data= dmin_DF, aes(x = dmin_sign, y = dmin_rs)) +
geom_point(aes(size  = c, col = c)) +
xlim(0, 2) +
ylim(0, 2) +
geom_abline(intercept = 0, slope = 1, color = "grey") +
xlab(expression(paste(d[min], " (two-trials rule)"))) +
ylab(expression(paste(d[min], " (sceptical p-value)"))) +
theme_bw()  +
theme(axis.text = element_text(size = 20),
axis.title = element_text(size = 25),
panel.background = element_blank()) +
scale_size(breaks = c(10, 5, 1, 0.2)) +
scale_colour_gradientn(colours = (c("orange", "red", "darkred", "black")))
# Chunk 54
sampleSizeZtest = function(delta, sd, sig.level = 0.05, power){
u <- qnorm(p = power)
v <- qnorm(p = 1 - sig.level/2)
n <- 2*(u + v)^2*sd^2/delta^2
return(n)
}
grid <- seq(0.09, 0.225, 0.001)
deltahat <- 0.15
se <- 0.025
ss <- sampleSizeZtest(delta = grid, sd = 0.4, sig.level = 0.01, power = 0.95)
ss1 <- sampleSizeZtest(delta = deltahat, sd = 0.4, sig.level = 0.01, power = 0.95)
set.seed(12345)
nsim <- 100000
deltahat2 <- rnorm(nsim, mean=deltahat, sd=se)
ss2 <- sampleSizeZtest(delta = deltahat2, sd = 0.4, sig.level = 0.01, power = 0.95)
library(gplots)
par(las=1)
plot(grid,
ss,
type="l",
xlab="Original effect estimate",
ylab="Replication sample size",
ylim=c(0, 800),
cex.lab = 1.5,
cex.axis = 1.2,
lwd = 2)
legend("topright",
"Power = 95%",
bty = "n",
cex = 1.75)
# Chunk 55
set.seed(12345)
nsim <- 100000
deltahat2 <- rnorm(nsim, mean=deltahat, sd=se)
ss2 <- sampleSizeZtest(delta = deltahat2, sd = 0.4, sig.level = 0.01, power = 0.95)
library(gplots)
par(las=1)
plot(grid,
ss,
type="l",
xlab="Original effect estimate",
ylab="Replication sample size",
ylim=c(0, 800),
cex.lab = 1.5,
cex.axis = 1.2,
lwd = 2)
lines(rep(deltahat, 2),
c(0, ss1),
lty=2,
lwd = 2)
points(deltahat,
ss1,
pch=19,
cex=1.2,
col=1)
points(deltahat,
0,
pch=19,
cex=1.2,
col=1)
lines(c(0, deltahat),
rep(ss1, 2),
lty = 2,
col = 1,
lwd = 2)
axis(2,
at=ss1,
label=round(ss1),
col=1,
col.axis=1,
cex.axis = 1.2)
legend("topright",
"Power = 95%",
bty = "n",
cex = 1.75)
# Chunk 56
set.seed(12345)
nsim <- 100000
deltahat2 <- rnorm(nsim, mean=deltahat, sd=se)
ss2 <- sampleSizeZtest(delta = deltahat2, sd = 0.4, sig.level = 0.01, power = 0.95)
library(gplots)
par(las=1)
plot(grid,
ss,
type="l",
xlab="Original effect estimate",
ylab="Replication sample size",
ylim=c(0, 800),
cex.lab = 1.5,
cex.axis = 1.2,
lwd = 2)
lines(rep(deltahat, 2),
c(0, ss1),
lty=2,
lwd = 2)
points(deltahat,
ss1,
pch=19,
cex=1.2,
col=1)
points(deltahat,
0,
pch=19,
cex=1.2,
col=2)
lines(c(0, deltahat),
rep(ss1, 2),
lty = 2,
col = 1,
lwd = 2)
axis(2,
at=ss1,
label=round(ss1),
col=1,
col.axis=1,
cex.axis = 1.2)
plotCI(x = deltahat,
y = 0,
li = quantile(deltahat2, 0.025),
ui = quantile(deltahat2, 0.975),
col=2, lwd=2, add=TRUE, err="x")
legend("topright",
"Power = 95%",
bty = "n",
cex = 1.75)
# Chunk 57
set.seed(12345)
nsim <- 100000
deltahat2 <- rnorm(nsim, mean=deltahat, sd=se)
ss2 <- sampleSizeZtest(delta = deltahat2, sd = 0.4, sig.level = 0.01, power = 0.95)
library(gplots)
par(las=1)
plot(grid,
ss,
type="l",
xlab="Original effect estimate",
ylab="Replication sample size",
ylim=c(0, 800),
cex.lab = 1.5,
cex.axis = 1.2,
lwd = 2)
lines(rep(deltahat, 2),
c(0, ss1),
lty=2,
lwd = 2)
points(deltahat,
ss1,
pch=19,
cex=1.2,
col=1)
points(deltahat,
0,
pch=19,
cex=1.2,
col=2)
points(min(grid),
mean(ss2),
pch=19,
cex=1.2,
col=2)
lines(c(0, deltahat),
rep(ss1, 2),
lty = 2,
col = 1,
lwd = 2)
axis(2,
at=ss1,
label=round(ss1),
col=1,
col.axis=1,
cex.axis = 1)
plotCI(x = deltahat, y=0, li=quantile(deltahat2, 0.025), ui = quantile(deltahat2, 0.975),
col=2, lwd=2, add=TRUE, err="x")
plotCI(x = min(grid), y=mean(ss2), li=quantile(ss2, 0.025), ui = quantile(ss2, 0.975),
col=2, lwd=2, add=TRUE, err="y")
lines(rep(quantile(deltahat2, 0.025), 2),
c(0, quantile(ss2, 0.975)),
lty=2, col=2,
lwd = 2)
lines(rep(quantile(deltahat2, 0.975), 2),
c(0, quantile(ss2, 0.025)),
lty=2, col=2,
lwd = 2)
lines(c(0, quantile(deltahat2, 0.975)),
rep(quantile(ss2, 0.025), 2),
lty=2,
col=2,
lwd = 2)
lines(c(0, quantile(deltahat2, 0.025)),
rep(quantile(ss2, 0.975), 2),
lty =2,
col=2,
lwd = 2)
axis(2,
at=mean(ss2),
label=round(mean(ss2)),
col = 2,
col.axis = 2,
cex.axis = 1.2)
legend("topright",
"Power = 95%",
bty = "n",
cex = 1.75)
# Chunk 58
# power calculation
powerSignificance(zo = p2z(0.011, alternative = "one.sided"),
c = 9.2,
designPrior = "conditional")
# Chunk 59
# power calculation
powerSignificance(zo = p2z(0.011, alternative = "one.sided"),
c = 9.2,
shrinkage = 0.5,
designPrior = "conditional")
# Chunk 61
par(las = 1)
pval.or <- c(0.0001, 0.001, 0.005, 0.01, 0.025)
pow.cond <- powerSignificance(zo = p2z(pval.or, alternative = "one.sided"),
c = 1, designPrior = "conditional")
pow.condRS <- powerReplicationSuccess(zo = p2z(pval.or, alternative = "one.sided"),
c = 1, designPrior = "conditional")
pow.condshrink <- powerSignificance(zo = p2z(pval.or, alternative = "one.sided"),
c = 1, designPrior = "conditional", shrinkage=0.25)
pow.pred <- powerSignificance(zo = p2z(pval.or, alternative = "one.sided"),
c = 1, designPrior = "predictive")
pow.predRS <- powerReplicationSuccess(zo = p2z(pval.or, alternative = "one.sided"),
c = 1, designPrior = "predictive")
ss.cond <- sampleSizeSignificance(zo = p2z(pval.or, alternative = "one.sided"),
power=0.8, designPrior = "conditional")
ss.condshrink <- sampleSizeSignificance(zo = p2z(pval.or, alternative = "one.sided"),
power=0.8, designPrior = "conditional", shrinkage=0.25)
ss.pred <- sampleSizeSignificance(zo = p2z(pval.or, alternative = "one.sided"),
power=0.8, designPrior = "predictive")
plot(pval.or, pow.cond*100, type = "p", col = "red", ylim = c(0,100),
xlab = "One-sided original p-value",
ylab = "Power (in %)", pch = 20, cex = 1.75,
cex.lab = 1.5,
cex.axis = 1.5)
points(pval.or, pow.pred*100, col = "blue", pch = 20, cex = 1.75)
legend("topright",
c("Conditional", "Predictive"),
col = c("red", "blue"),
pch = 20, bty = "n",
cex = 2.2)
# Chunk 62
par(las = 1)
po.plot <- seq(0.000001, 0.025, by = 0.0001)
pow.cond1 <- powerSignificance(zo = p2z(po.plot, alternative = "one.sided"),
c = 1, designPrior = "conditional")
pow.pred1 <- powerSignificance(zo = p2z(po.plot, alternative = "one.sided"),
c = 1, designPrior = "predictive")
plot(po.plot, pow.cond1*100, col = "red", ylim = c(0,100), type = "l",
xlab = "One-sided original p-value",
ylab = "Power (in %)", lwd = 1.8,
cex.lab = 1.5,
cex.axis = 1.5)
lines(po.plot, pow.pred1*100, col = "blue", lwd = 2)
points(pval.or, pow.cond*100, col = "red", pch = 20, cex = 1.75)
points(pval.or, pow.pred*100, col = "blue", pch = 20, cex = 1.75)
abline(h = 50, lty = 3)
axis(2, at = 50, label = "50", cex.axis = 1.5,
col = "gray40")
legend("topright",
c("Conditional", "Predictive"),
col = c("red", "blue"),
lty = 1, bty = "n",
cex = 2.2, lwd = 2)
# Chunk 63
par(las = 1)
pow.cond2 <- powerSignificance(zo = p2z(po.plot, alternative = "one.sided"),
c = 1, designPrior = "conditional")
pow.condshrink2 <- powerSignificance(zo = p2z(po.plot, alternative = "one.sided"),
c = 1, designPrior = "conditional",
shrinkage = 0.25)
plot(po.plot, pow.cond2*100, col = "red", ylim = c(0,100), type = "l",
xlab = "One-sided original p-value",
ylab = "Power (in %)",
lwd = 2,
cex.lab = 1.5,
cex.axis = 1.5)
lines(po.plot, pow.condshrink2*100, col = "red", lty = 2,
lwd = 2)
abline(h = 50, lty = 3)
axis(2, at = 50, label = "50", cex.axis = 1.5,
col = "gray40")
points(pval.or, pow.cond*100, col = "red", pch = 20, cex = 1.75)
points(pval.or, pow.condshrink*100, col = "red", pch = 20, cex = 1.75)
legend("topright",
c("Conditional without shrinkage", "Conditional with 25% shrinkage"),
col = c("red", "red"),
lty = c(1, 2), bty = "n",
cex = 2.2,
lwd = 2)
# Chunk 64
par(las = 1)
ss.cond1 <- sampleSizeSignificance(zo = p2z(po.plot, alternative = "one.sided"),
power = 0.8, designPrior = "conditional")
ss.pred1 <- sampleSizeSignificance(zo = p2z(po.plot, alternative = "one.sided"),
power = 0.8, designPrior = "predictive" )
plot(po.plot, ss.cond1, type = "l", ylim = c(0, 4), col = "red",
xlab = "One-sided original p-value",
ylab = "Relative sample size",
lwd = 2,
cex.lab = 1.5,
cex.axis = 1.5)
lines(po.plot, ss.pred1, col = "blue", lwd = 2)
abline(h = c(1, 2, 3), col = "grey", lty = 2)
points(pval.or, ss.cond, col = "red", pch = 20, cex = 1.75)
points(pval.or, ss.pred, col = "blue", pch = 20, cex = 1.75)
legend("topleft",
c("Conditional", "Predictive"),
col = c("red", "blue"),
lty = 1, bty = "n",
cex = 2.2,
lwd = 2,
bg = "white")
# Chunk 65
par(las = 1)
ss.condshrink1 <- sampleSizeSignificance(zo = p2z(po.plot, alternative = "one.sided"),
power = 0.8, designPrior = "conditional",
shrinkage = 0.25)
plot(po.plot, ss.cond1, type = "l", ylim = c(0, 4), col = "red",
xlab = "One-sided original p-value",
ylab = "Relative sample size",
lwd = 2,
cex.lab = 1.5,
cex.axis = 1.5)
lines(po.plot, ss.condshrink1, col = "red", lty = 2,
lwd = 2)
abline(h = c(1, 2, 3), col = "grey", lty = 2)
points(pval.or, ss.cond, col = "red", pch = 20, cex = 1.75)
points(pval.or, ss.condshrink, col = "red", pch = 20, cex = 1.75)
legend("topleft",
c("Conditional without shrinkage", "Conditional with 25% shrinkage"),
col = c("red", "red"),
lty = c(1, 2), bty = "n",
cex = 2.2,
lwd = 2)
# dataset
data("SSRP")
head("SSRP")
head(SSRP)
?head
6.15*21.1
129.77/60
0.16*60
