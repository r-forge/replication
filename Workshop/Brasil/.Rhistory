size = 1.5) +
geom_text(aes(label = paste("italic(p)[o] ==~",
p[1], sep = "")), parse = TRUE,
x = 1, y = 0.8, size = 8) +
geom_text(aes(label = paste("italic(p)[r] ==~",
p[2], sep = "")), parse = TRUE,
x = 2, y = 0.8, size = 8) +
geom_text(aes(label = paste("hat(theta)[o] ==~",
round(z[1], 2),
sep = "")), parse = TRUE,
x = 0.7, y = 0.38, size = 8) +
geom_text(aes(label = paste("hat(theta)[r] ==~",
round(z[2], 2),
sep = "")), parse = TRUE,
x = 2.3,y = 0.25, size = 8) +
geom_text(aes(label = paste("italic(n)[o] ==~", n[1], sep = "")),
parse = TRUE,
x = 0.7, y = 0.25, size = 8) +
geom_text(aes(label = paste("italic(n)[r] ==~", n[2], sep = "")),
parse = TRUE,
x = 2.3, y = 0.1, size = 8) +
annotate("text", x = 1.5, y = study$ro,
label = "?", size = 55,
color = "red") +
ylim(-0.05, 1) +
labs(x = " ", y = "Effect Size") +
theme_bw() +
theme(axis.text = element_text(size = 25),
axis.title = element_text(size = 30))
study_plot
study_plot
ggplot(data = plot_df, aes(x = Study, y = z)) +
geom_hline(yintercept = 0, lty = 2) +
geom_pointrange(aes(ymin = z - qnorm(0.975)*se,
ymax = z + qnorm(0.975)*se),
size = 1.5) +
geom_text(aes(label = paste("italic(p)[o] ==~",
p[1], sep = "")), parse = TRUE,
x = 1, y = 0.8, size = 10, color = "red") +
geom_text(aes(label = paste("italic(p)[r] ==~",
p[2], sep = "")), parse = TRUE,
x = 2, y = 0.8, size = 10, color = "red") +
geom_text(aes(label = paste("hat(theta)[o] ==~",
round(z[1], 2),
sep = "")), parse = TRUE,
x = 0.7, y = 0.38, size = 8) +
geom_text(aes(label = paste("hat(theta)[r] ==~",
round(z[2], 2),
sep = "")), parse = TRUE,
x = 2.3,y = 0.25, size = 8) +
geom_text(aes(label = paste("italic(n)[o] ==~", n[1], sep = "")),
parse = TRUE,
x = 0.7, y = 0.25, size = 8) +
geom_text(aes(label = paste("italic(n)[r] ==~", n[2], sep = "")),
parse = TRUE,
x = 2.3, y = 0.1, size = 8) +
ylim(-0.05, 1) +
labs(x = " ", y = "Effect Size") +
theme_bw() +
theme(axis.text = element_text(size = 25),
axis.title = element_text(size = 30))
pi_df <- predictionInterval(thetao = study$fiso,
seo = study$se_fiso,
ser = study$se_fisr)
pi_df <- tanh(pi_df)
q_pval <- Qtest(thetao = study$fiso, thetar = study$fisr,
seo = study$se_fiso, ser = study$se_fisr)
ggplot(data = plot_df, aes(x = Study, y = z)) +
geom_hline(yintercept = 0, lty = 2) +
geom_pointrange(aes(ymin = z - qnorm(0.975)*se,
ymax = z + qnorm(0.975)*se),
size = 1.5) +
annotate(geom = "text", x = 1.47, y = 0.5,
label = paste("italic(p)[Q] ==~", formatPval(q_pval)),
color = "springgreen4", size = 10, parse = TRUE) +
geom_text(aes(label = paste("italic(p)[o] ==~",
p[1], sep = "")), parse = TRUE,
x = 1, y = 0.8, size = 8) +
geom_text(aes(label = paste("italic(p)[r] ==~",
p[2], sep = "")), parse = TRUE,
x = 2, y = 0.8, size = 8) +
geom_text(aes(label = paste("hat(theta)[o] ==~",
round(z[1], 2),
sep = "")), parse = TRUE,
x = 0.7, y = 0.38, size = 8) +
geom_text(aes(label = paste("hat(theta)[r] ==~",
round(z[2], 2),
sep = "")), parse = TRUE,
x = 2.3,y = 0.25, size = 8) +
geom_text(aes(label = paste("italic(n)[o] ==~", n[1], sep = "")),
parse = TRUE,
x = 0.7, y = 0.25, size = 8) +
geom_text(aes(label = paste("italic(n)[r] ==~", n[2], sep = "")),
parse = TRUE,
x = 2.3, y = 0.1, size = 8) +
ylim(-0.05, 1) +
labs(x = " ", y = "Effect Size") +
theme_bw() +
theme(axis.text = element_text(size = 25),
axis.title = element_text(size = 30))
var_ma_estimate <- with(study, 1/(1/se_fiso^2 + 1/se_fisr^2))
ma_estimate <- with(study, fiso/se_fiso^2 + fisr/se_fisr^2)*
var_ma_estimate
p_ma <- pnorm(abs(ma_estimate/sqrt(var_ma_estimate)),
lower.tail = FALSE)*2
ma_data <- data.frame(se = sqrt(var_ma_estimate),
ma_estimate = ma_estimate,
ma_estimate_r = tanh(ma_estimate),
p_ma = formatPval(p_ma),
stringsAsFactors = FALSE)
ggplot(data = plot_df, aes(x = Study, y = z)) +
geom_hline(yintercept = 0, lty = 2) +
geom_pointrange(aes(ymin = z - qnorm(0.975)*se,
ymax = z + qnorm(0.975)*se),
size = 1.5) +
geom_pointrange(data = ma_data,
aes(x = 1.5, y = ma_estimate_r,
ymin = ma_estimate - qnorm(0.975)*se,
ymax = ma_estimate + qnorm(0.975)*se),
size = 1.5, color = "tan3") +
geom_text(data = ma_data, color = "tan3",
aes(x = 1.4, y = ma_estimate_r,
label = paste("italic(p)[M] ==~", p_ma)),
nudge_y = 0.31, nudge_x = 0.12,
size = 10, parse = TRUE) +
geom_text(aes(label = paste("italic(p)[o] ==~",
p[1], sep = "")), parse = TRUE,
x = 1, y = 0.8, size = 8) +
geom_text(aes(label = paste("italic(p)[r] ==~",
p[2], sep = "")), parse = TRUE,
x = 2, y = 0.8, size = 8) +
geom_text(aes(label = paste("hat(theta)[o] ==~",
round(z[1], 2),
sep = "")), parse = TRUE,
x = 0.7, y = 0.38, size = 8) +
geom_text(aes(label = paste("hat(theta)[r] ==~",
round(z[2], 2),
sep = "")), parse = TRUE,
x = 2.3,y = 0.25, size = 8) +
geom_text(aes(label = paste("italic(n)[o] ==~", n[1], sep = "")),
parse = TRUE,
x = 0.7, y = 0.25, size = 8) +
geom_text(aes(label = paste("italic(n)[r] ==~", n[2], sep = "")),
parse = TRUE,
x = 2.3, y = 0.1, size = 8) +
ylim(-0.05, 1) +
labs(x = " ", y = "Effect Size") +
theme_bw() +
theme(axis.text = element_text(size = 25),
axis.title = element_text(size = 30))
library(ReplicationSuccess)
vignette("ReplicationSuccess")
?pSceptical # documentation
news(package = "ReplicationSuccess") # news page
# Second axis for Fisher z-scale
lims_r <- tanh(seq(0, 1, 0.5))
labs_r <- round(lims_r, 2)
ggplot(data = plot_df, aes(x = Study, y = z)) +
geom_hline(yintercept = 0, lty = 2) +
geom_pointrange(aes(ymin = z - qnorm(0.975)*se,
ymax = z + qnorm(0.975)*se),
size = 1.25) +
geom_text(aes(label = paste("italic(r) ==~",
round(r, 2),
sep = "")), parse = TRUE,
nudge_x = c(-0.31, 0.27), nudge_y = 0.1, size = 6.5) +
geom_text(aes(label = paste("'Fisher-z ' ==~",
round(z, 2),
sep = "")), parse = TRUE,
nudge_x = c(-0.31, 0.27), nudge_y = -0.1, size = 6.5) +
scale_y_continuous(limits = c(-0.05, 1.2),
breaks = seq(0, 2.5, 0.5),
sec.axis = sec_axis(trans = ~tanh(.),
breaks = lims_r,
labels = labs_r,
name = expression(paste("Correlation ", italic(r))))) +
labs(x = " ", y = expression(paste("Fisher-",italic(z)))) +
theme_bw() +
theme(axis.text = element_text(size = 20),
axis.title = element_text(size = 25))
?RProjects # Documentation
po <- study$po
pr <- study$pr
to <- study$fiso/study$se_fiso
tr <- study$fisr/study$se_fisr
c <- study$se_fiso^2/study$se_fisr^2
RProjects$zo <- RProjects$fiso/RProjects$se_fiso
RProjects$zr <- RProjects$fisr/RProjects$se_fisr
RProjects$c <- RProjects$se_fiso^2/RProjects$se_fisr^2
library(meta)
library(ReplicationSuccess)
data("RProjects")
RProjects$zo <- RProjects$fiso/RProjects$se_fiso
RProjects$zr <- RProjects$fisr/RProjects$se_fisr
RProjects$c <- RProjects$se_fiso^2/RProjects$se_fisr^2
# for example
vignette("ReplicationSuccess")
?RProjects
gg_zAll <- ggplot(data = RProjects, aes(x = fiso, y = fisr)) +
geom_hline(yintercept = 0, lty = 2) +
geom_abline(intercept = 0, slope = 1, col = "grey") +
geom_point(alpha = 0.5, size = 7, shape = 21,
fill = "midnightblue") +
labs(x = expression(paste("Original effect estimate ", hat(theta)[o])),
y = expression(paste("Replication effect estimate ", hat(theta)[r]))) +
lims(x = c(-0.5, 2), y = c(-0.5, 2)) +
coord_fixed() +
theme_bw() +
theme(axis.text = element_text(size = 18),
axis.title = element_text(size = 25)); gg_zAll
## compute for all projects
significant_O <- RProjects$po1 < 0.025
significant_R <- RProjects$pr1 < 0.025
RProjects$TTR <- significant_O & significant_R
allDF <- data.frame(project = "all", success = mean(RProjects$TTR)*100,
type = "significance",
successFormat = paste0(round(mean(RProjects$TTR)*100, 0), "\\% (",
sum(RProjects$TTR), "/",
length(RProjects$TTR), ")"))
## compute for each project
signSuccessList <- lapply(X = unique(RProjects$project), FUN = function(p) {
data_project <- subset(RProjects, project == p)
success <- data_project$TTR
data.frame(project = p, success = mean(success)*100, type = "significance",
successFormat = paste0(round(mean(success)*100, 0), "\\% (",
sum(success), "/", length(success), ")"))
})
signSuccessDF <- do.call("rbind", signSuccessList)
## table
library(xtable)
dfTable1 <- rbind(signSuccessDF, allDF)[,c(1, 4)]
Table1 <- xtable(dfTable1, digits = 1)
colnames(Table1) <- c("Project", "Both $p$-values < 0.025")
print(Table1, include.rownames = FALSE, booktabs = TRUE,
add.to.row = list(pos = list(4), command = "\\midrule \n"),
sanitize.text.function = function(x) {x})
## Plots of effect estimates
par(mfrow = c(2, 2), las = 1, mai = rep(0.68, 4))
for (p in unique(RProjects$project)) {
data_project <- subset(RProjects, project == p)
data_project <- subset(RProjects, project == p)
significant_O <- data_project$po1 < 0.025
significant_R <- data_project$pr1 < 0.025
success <- significant_O & significant_R
col_success <- color <- ifelse(success == FALSE, "#333333B3", "#8B0000B3")
title <- paste0(p, ": ", round(mean(success)*100, 0),
"% (", sum(success), "/", length(success), ")")
plot(rr ~ ro, data = data_project, ylim = c(-0.5, 1), cex = 2.5,
xlim = c(-0.5, 1), main = title, xlab = expression(italic(r)[o]),
ylab = expression(italic(r)[r]), col = col_success, pch = 20,
cex.main = 1.8, cex.axis = 1.5, cex.lab = 1.5)
legend("topleft",
legend = c(expression(paste("both ", italic(p), "-value",  s <= 0.025)),
expression(paste("at least one ", italic(p), "-values > 0.025"))),
# c("both significant", "not both significant"),
pch = 20, pt.cex = 2, cex = 1.1,
# title = "signficant in same direction (5%)",
col = c("#8B0000B3", "#333333B3"), bty = "n")
abline(h = 0, lty = 2)
abline(a = 0, b = 1, col = "grey")
}
## computing zo, zr, c
RProjects$zo <- with(RProjects, fiso/se_fiso)
RProjects$zr <- with(RProjects, fisr/se_fisr)
RProjects$c <- with(RProjects, se_fiso^2/se_fisr^2)
## compute for all projects
RProjects$pQ <- Qtest(thetao = RProjects$fiso, thetar = RProjects$fisr,
seo = RProjects$se_fiso, ser = RProjects$se_fisr)
RProjects$Qincompatible <- RProjects$pQ <= 0.05
allQDF <- data.frame(project = "all", incomp = mean(RProjects$Qincompatible)*100,
type = "Q-test",
incompFormat = paste0(round(mean(RProjects$Qincompatible)*100, 0),
"\\% (", sum(RProjects$Qincompatible),
"/", length(RProjects$Qincompatible), ")"))
RProjects$pQ
RProjects$Qincompatible <- RProjects$pQ <= 0.05
allQDF <- data.frame(project = "all", incomp = mean(RProjects$Qincompatible)*100,
type = "Q-test",
incompFormat = paste0(round(mean(RProjects$Qincompatible)*100, 0),
"\\% (", sum(RProjects$Qincompatible),
"/", length(RProjects$Qincompatible), ")"))
## compute for each project
QList <- lapply(X = unique(RProjects$project), FUN = function(p) {
data_project <- subset(RProjects, project == p)
data.frame(project = p, incomp = mean(data_project$Qincompatible)*100, type = "Q-test",
incompFormat = paste0(round(mean(data_project$Qincompatible)*100, 0),
"\\% (", sum(data_project$Qincompatible), "/",
length(data_project$Qincompatible), ")"))
})
QDF <- do.call("rbind", QList)
## table
dfTable2 <- rbind(QDF, allQDF)[,c(1, 4)]
Table2 <- xtable(dfTable2, digits = 1)
colnames(Table2) <- c("Project",
"Incompatible estimates ($p_Q < 0.05$)")
print(Table2, include.rownames = FALSE, booktabs = TRUE,
add.to.row = list(pos = list(4), command = "\\midrule \n"),
sanitize.text.function = function(x) {x}, floating = FALSE)
par(mfrow = c(2, 2), las = 1, mai = rep(0.68, 4))
for (p in unique(RProjects$project)) {
data_project <- subset(RProjects, project == p)
pval_Q_project <- Qtest(thetao = data_project$fiso,
thetar = data_project$fisr,
seo = data_project$se_fiso,
ser = data_project$se_fisr)
incompatible <- pval_Q_project < 0.05
PropIncomp <- mean(incompatible)
color <- ifelse(incompatible == FALSE, "#333333B3", "#8B0000B3")
title <- paste0(p, ": ", round(PropIncomp*100, 0), '% incompatible')
plot(rr ~ ro, data = data_project, ylim = c(-0.5, 1), cex = 2.5,
xlim = c(-0.5, 1), main = title, xlab = expression(italic(r)[o]),
ylab = expression(italic(r)[r]), col = color, pch = 20,
cex.main = 1.7, cex.axis = 1.5, cex.lab = 1.5)
legend("topleft",
c(expression(italic(p)[Q] < 0.05), expression(italic(p)[Q] >= 0.05)),
pch = 20, pt.cex = 2, cex = 1.4,
col = c("#8B0000B3", "#333333B3"), bty = "n")
abline(h = 0, lty = 2)
abline(a = 0, b = 1, col = "grey")
}
library(ReplicationSuccess)
library(tidyverse)
library(meta)
source("functions.R")
ind.Qincompatible <- which(RProjects$Qincompatible)
incomp <- RProjects[ind.Qincompatible, ]
no.incomp <- RProjects[-ind.Qincompatible,]
ex1 <- incomp[1,]
ex2 <- incomp[23,]
ex3 <- no.incomp[42,]
pQ_ex1 <- with(ex1, Qtest(thetao = fiso, thetar = fisr,
seo = se_fiso, ser = se_fisr))
scepticalCI_ex1 <- with(ex1, scepticalCI(thetao = fiso, thetar = fisr,
seo = se_fiso, ser = se_fisr))$CI
with(ex1, ForestPlot(thetahat = c(fiso, fisr),
se = c(se_fiso, se_fisr),
title = study))
library(xtable)
incompSuccess <- paste("\\cellcolor{red!25}{", sum(RProjects$pQ <= 0.05 & RProjects$TTR), "}")
compSuccess <-  sum(RProjects$pQ > 0.05 & RProjects$TTR)
incompNoSuccess <- sum(RProjects$pQ <= 0.05 & !RProjects$TTR)
compNoSuccess <- paste("\\cellcolor{red!25}{", sum(RProjects$pQ > 0.05 & !RProjects$TTR), "}")
comp <- c("$p_Q > 0.05$", compSuccess, compNoSuccess)
incomp <- c("$p_Q \\leq 0.05$", incompSuccess, incompNoSuccess)
mat <- matrix(c(comp, incomp), nrow = 2, byrow = T)
colnames(mat) <- c(" ", "yes", "no")
xt.mat <- xtable(mat, align = "cc|cc")
addtorow <- list()
addtorow$pos <- list( -1)
addtorow$command <- c(" & \\multicolumn{2}{c}{Success two-trials rule} \\\\\n")
print(xt.mat,
sanitize.text.function=identity,
add.to.row = addtorow,
hline.after = c(0,2),
include.rownames = F)
pQ_ex2 <- with(ex2, Qtest(thetao = fiso, thetar = fisr,
seo = se_fiso, ser = se_fisr))
scepticalCI_ex2 <- with(ex1, scepticalCI(thetao = fiso, thetar = fisr,
seo = se_fiso, ser = se_fisr))$CI
with(ex2, ForestPlot(thetahat = c(fiso, fisr),
se = c(se_fiso, se_fisr),
title = study))
pQ_ex3 <- with(ex3, Qtest(thetao = fiso, thetar = fisr,
seo = se_fiso, ser = se_fisr))
scepticalCI_ex3 <- with(ex1, scepticalCI(thetao = fiso, thetar = fisr,
seo = se_fiso, ser = se_fisr))$CI
with(ex3, ForestPlot(thetahat = c(fiso, fisr),
se = c(se_fiso, se_fisr),
title = study))
pval_meta <- c()
for(i in 1:nrow(RProjects)){
pval_meta[length(pval_meta) + 1] <- with(RProjects[i, ],
metagen(TE = c(fiso, fisr),
seTE = c(se_fiso, se_fisr))$pval.fixed)
}
RProjects$pMeta <- pval_meta
RProjects$pMsuccess <- RProjects$pMeta < 0.05
allMetaDF <- data.frame(project = "all", meta = mean(RProjects$pMsuccess)*100,
type = "Q-test",
metaFormat = paste0(round(mean(RProjects$pMsuccess)*100, 0),
"\\% (", sum(RProjects$pMsuccess),
"/", length(RProjects$pMsuccess), ")"))
## compute for each project
MetaList <- lapply(X = unique(RProjects$project), FUN = function(p) {
data_project <- subset(RProjects, project == p)
data.frame(project = p, meta = mean(data_project$pMsuccess)*100, type = "meta-analysis",
metaFormat = paste0(round(mean(data_project$pMsuccess)*100, 0),
"\\% (", sum(data_project$pMsuccess), "/",
length(data_project$pMsuccess), ")"))
})
MetaDF <- do.call("rbind", MetaList)
## table
dfTableMeta <- rbind(MetaDF, allMetaDF)[,c(1, 4)]
TableMeta <- xtable(dfTableMeta, digits = 1)
colnames(TableMeta) <- c("Project",
"$p_M \\leq 0.05$")
print(TableMeta, include.rownames = FALSE, booktabs = TRUE,
add.to.row = list(pos = list(4), command = "\\midrule \n"),
sanitize.text.function = function(x) {x}, floating = FALSE)
par(mfrow = c(2, 2), las = 1, mai = rep(0.68, 4))
for (p in unique(RProjects$project)) {
data_project <- subset(RProjects, project == p)
success <- data_project$pMeta < 0.05
col_success <- ifelse(success == FALSE, "#333333B3", "#8B0000B3")
title <- paste0(p, ": ", round(mean(success)*100, 0), "% (",
sum(success), "/",  length(success), ")")
plot(rr ~ ro, data = data_project, ylim = c(-0.5, 1), cex = 2.5,
xlim = c(-0.5, 1), main = title, xlab = expression(italic(r)[o]),
ylab = expression(italic(r)[r]), col = col_success, pch = 20,
cex.main = 1.8, cex.axis = 1.5, cex.lab = 1.5)
legend("topleft", c(expression(italic(p)[M] <= 0.05),
expression(italic(p)[M] > 0.05)),
pch = 20, pt.cex = 2, cex = 1.4,
col = c("#8B0000B3", "#333333B3"), bty = "n")
abline(h = 0, lty = 2)
abline(a = 0, b = 1, col = "grey")
}
source("functions.R")
ind.weird <- which(RProjects$pMsuccess & RProjects$Qincompatible & !RProjects$TTR )
ex1.4 <- RProjects[ind.weird[3],]
with(ex1.4,
ForestPlot(thetahat = c(fiso, fisr), se = c(se_fiso, se_fisr),
metaAn = TRUE,
scepticalCI = F,
title = study))
gold <- sampleSizeReplicationSuccess(zo = zo, power = 0.9,
level = 0.025, type = "golden")
zo = seq(1, 5, by = 0.01)
gold <- sampleSizeReplicationSuccess(zo = zo, power = 0.9,
level = 0.025, type = "golden")
po = z2p(zo, alternative = "one.sided")
gold <- sampleSizeReplicationSuccess(zo = zo, power = 0.9,
level = 0.025, type = "golden")
plot(po, gold)
zo = seq(1.96, 5, by = 0.01)
po = z2p(zo, alternative = "one.sided")
gold <- sampleSizeReplicationSuccess(zo = zo, power = 0.9,
level = 0.025, type = "golden")
plot(po, gold)
plot(po, gold, type = "l")
zo = seq(1.97, 5, by = 0.01)
po = z2p(zo, alternative = "one.sided")
gold <- sampleSizeReplicationSuccess(zo = zo, power = 0.9,
level = 0.025, type = "golden")
plot(po, gold, type = "l")
plot(po, gold, type = "l",
log = "x")
gold <- sampleSizeReplicationSuccess(zo = zo, power = 0.8,
level = 0.025, type = "golden")
plot(po, gold, type = "l",)
zo = seq(2, 5, by = 0.01)
po = z2p(zo, alternative = "one.sided")
gold <- sampleSizeReplicationSuccess(zo = zo, power = 0.8,
level = 0.025, type = "golden")
plot(po, gold, type = "l")
cont <- sampleSizeReplicationSuccess(zo = zo, power = 0.8,
level = 0.025, type = "controlled")
plot(po, gold, type = "l")
zo = seq(2, 5, by = 0.2)
po = z2p(zo, alternative = "one.sided")
gold <- sampleSizeReplicationSuccess(zo = zo, power = 0.8,
level = 0.025, type = "golden")
cont <- sampleSizeReplicationSuccess(zo = zo, power = 0.8,
level = 0.025, type = "controlled")
plot(po, gold, type = "l")
lines(po, cont, lty = 2)
goldP <- powerReplicationSuccess(zo = zo, c = 1, type = "golden")
contP <- powerReplicationSuccess(zo = zo, c = 1, type = "controlled")
plot(po, goldP)
plot(po, goldP, type = "l")
lines(po, contP)
lines(po, contP, lty = 2)
goldP <- powerReplicationSuccess(zo = zo, c = 1, type = "golden")
contP <- powerReplicationSuccess(zo = zo, c = 1, type = "controlled")
plot(po, gold, type = "l")
lines(po, cont, lty = 2)
plot(po, goldP, type = "l")
lines(po, contP, lty = 2)
goldP <- powerReplicationSuccess(zo = zo, c = 2, type = "golden")
contP <- powerReplicationSuccess(zo = zo, c = 2, type = "controlled")
plot(po, gold, type = "l")
lines(po, cont, lty = 2)
plot(po, goldP, type = "l")
lines(po, contP, lty = 2)
text(x = 0.1, y = 10,
text = "c = 1")
text(x = 0.1, y = 10,
"c = 1")
text(x = 0.1, y = 10,
"c = 1")
?text
text(x = 0.1, y = 10,
labels = "c = 1")
text(x = 0.01, y = 10,
labels = "c = 1")
text(x = 0.001, y = 10,
labels = "c = 1")
plot(po.plot, pow.cond3*100, type = "l", col = "red", ylim = c(0,100),
lwd = 2.1,
xlab = "One-sided original p-value",
ylab = "Power (in %)",
cex.lab = 1.5,
cex.axis = 1.5,
lty = 1, main = "c = 1")
plot(po.plot, pow.cond3*100, type = "l", col = "red", ylim = c(0,100),
lwd = 2.1,
xlab = "One-sided original p-value",
ylab = "Power (in %)",
cex.lab = 1.5,
cex.axis = 1.5,
lty = 1, main = "c = 1")
levelSceptical(level = 0.025, c = 2, type = "controlled")
